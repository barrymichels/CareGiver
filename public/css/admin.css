.admin-content {
    margin-top: 80px;
    padding: 1rem;
    max-width: 1200px;
    margin-left: auto;
    margin-right: auto;
    width: 100%;
    box-sizing: border-box;
}

.schedule-manager {
    background-color: #242424;
    border-radius: 8px;
    padding: 1.5rem;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
}

.schedule-grid {
    display: grid;
    grid-template-columns: repeat(7, minmax(140px, 1fr));
    gap: 0.5rem;
    min-width: min-content;
}

.schedule-day {
    border: 1px solid var(--input-border);
    border-radius: 4px;
    background-color: transparent;
}

.day-header {
    padding: 0.75rem 0.5rem;
    text-align: center;
    border-bottom: 1px solid var(--input-border);
    background-color: var(--input-bg);
    border-radius: 4px 4px 0 0;
}

.day-name {
    font-weight: 500;
    font-size: clamp(0.875rem, 2vw, 1rem);
}

.day-date {
    font-size: 0.8rem;
    color: rgba(255, 255, 255, 0.6);
    margin-top: 0.25rem;
}

.time-slots {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    padding: 0.5rem;
}

.time-slot-row {
    display: grid;
    grid-template-columns: repeat(7, minmax(140px, 1fr));
    gap: 0.5rem;
}

.schedule-slot {
    background-color: transparent;
}

.slot-header {
    padding: 0.5rem;
    background-color: var(--input-bg);
    border: 1px solid var(--input-border);
    border-radius: 4px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    font-size: 0.875rem;
    gap: 0.25rem;
    margin-bottom: 0.5rem;
}

.slot-time {
    font-weight: 600;
    color: var(--primary-color);
}

.slot-label {
    color: rgba(255, 255, 255, 0.6);
    font-size: 0.8rem;
}

.available-count {
    font-size: 0.9rem;
    color: #4caf50;
}

.user-select {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--input-border);
    border-radius: 4px;
    background-color: var(--input-bg);
    color: var(--text-color);
    font-size: 0.9rem;
}

.schedule-actions {
    margin-top: 1.5rem;
    display: flex;
    justify-content: flex-end;
}

/* Mobile styles */
@media (max-width: 768px) {
    .schedule-manager {
        margin: -0.5rem;
        border-radius: 0;
    }

    .schedule-grid {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .schedule-day {
        min-width: 0;
    }
} 

/* Update user options container */
.user-options {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
}

/* Update user option styling */
.user-option {
    display: block;
    width: 100%;
    padding: 0.5rem 0.75rem;
    background-color: transparent;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s ease;
    text-align: left;
    font-size: 0.9rem;
}

/* Hide the radio button */
.user-option input[type="radio"] {
    display: none;
}

/* Normal state label */
.option-label {
    color: rgba(255, 255, 255, 0.9);
    font-size: 0.95rem;
    display: block;
    width: 100%;
}

/* Unassigned style */
.user-option:first-child .option-label {
    color: rgba(255, 255, 255, 0.5);
    font-style: italic;
}

/* Selected state (blue text when not highlighted) */
.user-option input[type="radio"]:checked + .option-label {
    color: var(--primary-color);
}

/* Highlighted state (white text on blue background) */
.user-option.highlighted {
    background-color: var(--primary-color);
}

/* ALL text becomes white when highlighted, overriding any other colors */
.user-option.highlighted .option-label {
    color: white !important;
}

/* Keep italic style for unassigned when highlighted */
.user-option.highlighted:first-child .option-label {
    font-style: italic;
}

/* Hover effect for non-highlighted state */
.user-option:not(.highlighted):hover {
    background-color: var(--input-bg);
}

/* User filter styles */
.user-filter {
    margin-top: 2rem;
    padding-top: 1.5rem;
    border-top: 1px solid var(--input-border);
}

.section-subtitle {
    font-size: 1.1rem;
    margin-bottom: 1rem;
    color: var(--text-color);
}

.user-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
}

.user-filter-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background-color: var(--input-bg);
    border: 1px solid var(--input-border);
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.user-filter-btn:hover {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
}

.user-filter-btn.active {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px var(--primary-color);
}

.user-name {
    color: var(--text-color);
    font-size: 0.9rem;
}

.slot-count {
    background-color: rgba(255, 255, 255, 0.1);
    padding: 0.2rem 0.5rem;
    border-radius: 12px;
    font-size: 0.8rem;
    color: var(--text-color);
    min-width: 1.5rem;
    text-align: center;
}

/* Add highlighting for filtered assignments */
.user-option.highlighted {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px var(--primary-color);
}

/* Add hover effects for desktop */
@media (min-width: 1025px) {
    .schedule-slot {
        transition: border-color 0.2s ease, transform 0.2s ease;
        cursor: pointer;
    }

    .schedule-slot:hover {
        border-color: var(--primary-color);
        transform: translateY(-1px);
    }
} 

/* Add JavaScript to ensure equal heights */
<script>
document.addEventListener('DOMContentLoaded', function() {
    function equalizeSlotHeights() {
        // Get all time slots (8am, 12:30pm, 5pm)
        const timeSlots = ['8:00am', '12:30pm', '5:00pm'];
        
        timeSlots.forEach(time => {
            // Find all slots for this time
            const slots = document.querySelectorAll(`.schedule-slot[data-time="${time}"]`);
            let maxHeight = 0;
            
            // Reset heights first
            slots.forEach(slot => slot.style.height = 'auto');
            
            // Find the maximum height
            slots.forEach(slot => {
                maxHeight = Math.max(maxHeight, slot.offsetHeight);
            });
            
            // Set all slots to the maximum height
            slots.forEach(slot => slot.style.height = `${maxHeight}px`);
        });
    }

    // Run on load and whenever content changes
    equalizeSlotHeights();
    window.addEventListener('resize', equalizeSlotHeights);
});
</script> 

/* When highlighted, make sure all text is white, including Unassigned */
.user-option.highlighted .option-label {
    color: white !important; /* Override the dimmed color for unassigned */
    font-style: italic; /* Keep the italic style for unassigned */
}

/* Keep the highlighted style for filtered items */
.user-option.highlighted {
    background-color: var(--primary-color);
} 